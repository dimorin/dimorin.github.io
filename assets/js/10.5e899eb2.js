(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{187:function(n,t,a){"use strict";a.r(t);var e=a(0),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"객체-리터럴-프로퍼티-기능-확장"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#객체-리터럴-프로퍼티-기능-확장","aria-hidden":"true"}},[n._v("#")]),n._v(" 객체 리터럴 프로퍼티 기능 확장")]),n._v(" "),a("h2",{attrs:{id:"프로퍼티-축약-표현"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#프로퍼티-축약-표현","aria-hidden":"true"}},[n._v("#")]),n._v(" 프로퍼티 축약 표현")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// ES5  \nvar  x  =  1,  y  =  2;  \nvar  obj  =  {  \n\tx:  x,  \n\ty:  y  \n};  \nconsole.log(obj);  // { x: 1, y: 2 }\n\n// ES6  \nlet  x  =  1,  y  =  2;  \nconst  obj  =  {  x,  y  };  \nconsole.log(obj);  // { x: 1, y: 2 }\n")])])]),a("h2",{attrs:{id:"프로퍼티-키-동적-생성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#프로퍼티-키-동적-생성","aria-hidden":"true"}},[n._v("#")]),n._v(" 프로퍼티 키 동적 생성")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// ES5  \nvar  prefix  =  'prop';  \nvar  i  =  0;  \nvar  obj  =  {};  \nobj[prefix  +  '-'  +  ++i]  =  i;  \nobj[prefix  +  '-'  +  ++i]  =  i;  \nobj[prefix  +  '-'  +  ++i]  =  i;  console.log(obj);  // {prop-1: 1, prop-2: 2, prop-3: 3}\n\n// ES6  \nconst  prefix  =  'prop';  \nlet  i  =  0;  \nconst  obj  =  {  \n\t[`${prefix}-${++i}`]:  i,  \n\t[`${prefix}-${++i}`]:  i,  \n\t[`${prefix}-${++i}`]:  i  \n};  \nconsole.log(obj);  // {prop-1: 1, prop-2: 2, prop-3: 3}\n")])])]),a("h2",{attrs:{id:"메소드-축약-표현"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#메소드-축약-표현","aria-hidden":"true"}},[n._v("#")]),n._v(" 메소드 축약 표현")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// ES5  \nvar  obj  =  {  \n\tname:  'Lee',  \n\tsayHi:  function()  {  \n\t\tconsole.log('Hi! '  +  this.name);  \n\t}  \n};  \nobj.sayHi();  // Hi! Lee\n\n// ES6  \nconst  obj  =  {  \n\tname:  'Lee',  \n\t// 메소드 축약 표현  \n\tsayHi()  {  \n\t\tconsole.log('Hi! '  +  this.name);  \n\t}  \n};  \nobj.sayHi();  // Hi! Lee\n")])])]),a("h2",{attrs:{id:"proto-프로퍼티에-의한-상속"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proto-프로퍼티에-의한-상속","aria-hidden":"true"}},[n._v("#")]),n._v(" "),a("strong",[n._v("proto")]),n._v(" 프로퍼티에 의한 상속")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// ES5  \nvar  parent  =  {  \n\tname:  'parent',  \n\tsayHi:  function()  {  \n\t\tconsole.log('Hi! '  +  this.name);  \n\t}  \n};  \n// 프로토타입 패턴 상속  \nvar  child  =  Object.create(parent);  \nchild.name  =  'child';  \nparent.sayHi();  // Hi! parent  \nchild.sayHi();  // Hi! child\n\n// ES6  \nconst  parent  =  {  \n\tname:  'parent',  \n\tsayHi()  {  \n\t\tconsole.log('Hi! '  +  this.name);  \n\t}  \n};  \nconst  child  =  {  \n\t// child 객체의 프로토타입 객체에 parent 객체를 바인딩하여 상속을 구현한다.  \n\t__proto__:  parent,  \n\tname:  'child'  \n};  \nparent.sayHi();  // Hi! parent  \nchild.sayHi();  // Hi! child\n")])])])])}],!1,null,null,null);t.default=r.exports}}]);