(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{182:function(t,r,e){"use strict";e.r(r);var a=e(0),n=Object(a.a)({},function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),e("p",[t._v("ES6에서는 파라미터에 기본값을 설정하여 함수 내에서 수행하던 파라미터 체크 및 초기화를 간소화할 수 있다.")]),t._v(" "),t._m(2),t._m(3),t._v(" "),t._m(4),t._v(" "),e("p",[t._v("Rest 파라미터(Rest Parameter)는 Spread 연산자(`...`)를 사용하여 파라미터를 정의한 것을 의미한다. Rest 파라미터를 사용하면 인수의 리스트를 함수 내부에서 배열로 전달받을 수 있다.")]),t._v(" "),t._m(5),e("p",[t._v("인수는 순차적으로 파라미터와 Rest 파라미터에 할당된다.")]),t._v(" "),t._m(6),e("p",[t._v("Rest 파라미터는 반드시 마지막 파라미터이어야 한다.")]),t._v(" "),t._m(7),t._m(8),t._v(" "),e("p",[t._v("arguments 객체는 유사 배열 객체이므로 배열 메소드를 사용하려면 "),e("a",{attrs:{href:"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/call",target:"_blank",rel:"noopener noreferrer"}},[t._v("Function.prototype.call"),e("OutboundLink")],1),t._v("을 사용해야 하는 번거로움이 있다.")]),t._v(" "),t._m(9),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16)])},[function(){var t=this.$createElement,r=this._self._c||t;return r("h1",{attrs:{id:"파라미터-기본값-rest-파라미터-spread-연산자-rest-spread-프로퍼티"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#파라미터-기본값-rest-파라미터-spread-연산자-rest-spread-프로퍼티","aria-hidden":"true"}},[this._v("#")]),this._v(" 파라미터 기본값, Rest 파라미터, Spread 연산자, Rest/Spread 프로퍼티")])},function(){var t=this.$createElement,r=this._self._c||t;return r("h2",{attrs:{id:"파라미터-기본값-default-parameter-value"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#파라미터-기본값-default-parameter-value","aria-hidden":"true"}},[this._v("#")]),this._v(" 파라미터 기본값 (Default Parameter value)")])},function(){var t=this.$createElement,r=this._self._c||t;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("// ES5  \nfunction  plus(x,  y)  {  \n\tx  =  x  ||  0;  // 매개변수 x에 인수를 할당하지 않은 경우, 기본값 0을 할당한다.  \n\ty  =  y  ||  0;  // 매개변수 y에 인수를 할당하지 않은 경우, 기본값 0을 할당한다.  \n\treturn  x  +  y;  \n}  \nconsole.log(plus());  // 0  \nconsole.log(plus(1,  2));  // 3\n// ES6  \nfunction  plus(x  =  0,  y  =  0)  {  \n\t// 파라미터 x, y에 인수를 할당하지 않은 경우, 기본값 0을 할당한다.  \n\treturn  x  +  y;  \n}  \nconsole.log(plus());  // 0  \nconsole.log(plus(1,  2));  // 3\n")])])])},function(){var t=this.$createElement,r=this._self._c||t;return r("h2",{attrs:{id:"rest-파라미터"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rest-파라미터","aria-hidden":"true"}},[this._v("#")]),this._v(" Rest 파라미터")])},function(){var t=this.$createElement,r=this._self._c||t;return r("h3",{attrs:{id:"기본-문법"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#기본-문법","aria-hidden":"true"}},[this._v("#")]),this._v(" 기본 문법")])},function(){var t=this.$createElement,r=this._self._c||t;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("function  foo(...rest)  {  \n\tconsole.log(Array.isArray(rest));  // true  \n\tconsole.log(rest);  // [ 1, 2, 3, 4, 5 ]  \n}  \nfoo(1,  2,  3,  4,  5);\n")])])])},function(){var t=this.$createElement,r=this._self._c||t;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("function  foo(param,  ...rest)  {  \n\tconsole.log(param);  // 1  \n\tconsole.log(rest);  // [ 2, 3, 4, 5 ]  \n}  \nfoo(1,  2,  3,  4,  5);  \nfunction  bar(param1,  param2,  ...rest)  {  \n\tconsole.log(param1);  // 1  \n\tconsole.log(param2);  // 2  \n\tconsole.log(rest);  // [ 3, 4, 5 ]  \n}  \nbar(1,  2,  3,  4,  5);\n")])])])},function(){var t=this.$createElement,r=this._self._c||t;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("function  foo(  ...rest,  param1,  param2)  {  }  \nfoo(1,  2,  3,  4,  5);  \n// SyntaxError: Rest parameter must be last formal parameter\n")])])])},function(){var t=this.$createElement,r=this._self._c||t;return r("h3",{attrs:{id:"arguments와-rest-파라미터"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#arguments와-rest-파라미터","aria-hidden":"true"}},[this._v("#")]),this._v(" arguments와 rest 파라미터")])},function(){var t=this.$createElement,r=this._self._c||t;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("// ES5  \nfunction  sum()  {  \n\t/*  가변 인자 함수는 arguments 객체를 통해 인수를 전달받는다.  \n\t유사 배열 객체인 arguments 객체를 배열로 변환한다.  */  \n\tvar  array  =  Array.prototype.slice.call(arguments);  \n\treturn  array.reduce(function  (pre,  cur)  {  \n\t\treturn  pre  +  cur;  \n\t});  \n}  \nconsole.log(sum(1,  2,  3,  4,  5));  // 15\n// ES6  \nfunction  sum(...args)  {  \n\tconsole.log(arguments);  // Arguments(5)&nbsp;[1, 2, 3, 4, 5, callee: (...), Symbol(Symbol.iterator): ƒ]  \n\tconsole.log(Array.isArray(args));  // true  \n\treturn  args.reduce((pre,  cur)  =>  pre  +  cur);  \n}  \nconsole.log(sum(1,  2,  3,  4,  5));  // 15\n")])])])},function(){var t=this.$createElement,r=this._self._c||t;return r("h2",{attrs:{id:"spread-연산자"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spread-연산자","aria-hidden":"true"}},[this._v("#")]),this._v(" Spread 연산자")])},function(){var t=this.$createElement,r=this._self._c||t;return r("h3",{attrs:{id:"함수의-인수로-사용하는-경우"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#함수의-인수로-사용하는-경우","aria-hidden":"true"}},[this._v("#")]),this._v(" 함수의 인수로 사용하는 경우")])},function(){var t=this.$createElement,r=this._self._c||t;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("// ES5  \nfunction  foo(x,  y,  z)  {  \n\tconsole.log(x);  // 1  \n\tconsole.log(y);  // 2  \n\tconsole.log(z);  // 3  \n}  \n// 배열을 분해하여 배열의 각 요소를 파라미터에 전달하려고 한다.  \nconst  arr  =  [1,  2,  3];  \n// apply 함수의 2번째 인수(배열)는 분해되어 함수 foo의 파라이터에 전달된다.  \nfoo.apply(null,  arr);  \n// foo.call(null, 1, 2, 3);\n\n// ES6  \nfunction  foo(x,  y,  z)  {  \n\tconsole.log(x);  // 1  \n\tconsole.log(y);  // 2  \n\tconsole.log(z);  // 3  \n}  \n// 배열을 foo 함수의 인자로 전달하려고 한다.  \nconst  arr  =  [1,  2,  3];  \n/* ...[1, 2, 3]는 [1, 2, 3]을 개별 요소로 분리한다(→ 1, 2, 3)  \nspread 연산자에 의해 분리된 배열의 요소는 개별적인 인자로서 각각의 매개변수에 전달된다. */  \nfoo(...arr);\n")])])])},function(){var t=this.$createElement,r=this._self._c||t;return r("h3",{attrs:{id:"배열에서-사용하는-경우"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#배열에서-사용하는-경우","aria-hidden":"true"}},[this._v("#")]),this._v(" 배열에서 사용하는 경우")])},function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ol",[e("li",[e("p",[t._v("concat")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// ES5  \nvar  arr  =  [1,  2,  3];  \t\nconsole.log(arr.concat([4,  5,  6]));  // [ 1, 2, 3, 4, 5, 6 ]\n\n// ES6  \nconst  arr  =  [1,  2,  3];  \n// ...arr은 [1, 2, 3]을 개별 요소로 분리한다  \nconsole.log([...arr,  4,  5,  6]);  // [ 1, 2, 3, 4, 5, 6 ]\n")])])])]),t._v(" "),e("li",[e("p",[t._v("push")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// ES5  \nvar  arr1  =  [1,  2,  3];  \nvar  arr2  =  [4,  5,  6];  \n// apply 메소드의 2번째 인자는 배열. 이것은 개별 인자로 push 메소드에 전달된다.  \nArray.prototype.push.apply(arr1,  arr2);  \nconsole.log(arr1);  // [ 1, 2, 3, 4, 5, 6 ]\n\n// ES6  \nconst  arr1  =  [1,  2,  3];  \nconst  arr2  =  [4,  5,  6];  \n// ...arr2는 [4, 5, 6]을 개별 요소로 분리한다  \narr1.push(...arr2);  // == arr1.push(4, 5, 6);  \nconsole.log(arr1);  // [ 1, 2, 3, 4, 5, 6 ]\n")])])])]),t._v(" "),e("li",[e("p",[t._v("splice")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// ES5  \nvar  arr1  =  [1,  2,  3,  6];  \nvar  arr2  =  [4,  5];  \n/*  apply 메소드의 2번째 인자는 배열. 이것은 개별 인자로 push 메소드에 전달된다.  \n[3, 0].concat(arr2) → [3, 0, 4, 5]  \narr1.splice(3, 0, 4, 5) → arr1[3]부터 0개의 요소를 제거하고 그자리(arr1[3])에 새로운 요소(4, 5)를 추가한다.  */  \nArray.prototype.splice.apply(arr1,  [3,  0].concat(arr2));  \nconsole.log(arr1);  // [ 1, 2, 3, 4, 5, 6 ]\n\n// ES6  \nconst  arr1  =  [1,  2,  3,  6];  \nconst  arr2  =  [4,  5];  \n// ...arr2는 [4, 5]을 개별 요소로 분리한다  \narr1.splice(3,  0,  ...arr2);  // == arr1.splice(3, 0, 4, 5);  \nconsole.log(arr1);  // [ 1, 2, 3, 4, 5, 6 ]\n")])])])]),t._v(" "),e("li",[e("p",[t._v("copy\n")]),e("p",[t._v("ES5에서 기존 배열을 복사하기 위해서는 slice 메소드를 사용한다."),e("br"),t._v("\nSpread 연산자를 사용하면 보다 간편하게 배열을 복사할 수 있다.\n")]),e("p"),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// ES5  \nvar  arr  =  [1,  2,  3];  \nvar  copy  =  arr.slice();  \nconsole.log(copy);  // [ 1, 2, 3 ]  \n// copy를 변경한다.  \ncopy.push(4);  \nconsole.log(copy);  // [ 1, 2, 3, 4 ]  \n// arr은 변경되지 않는다.  \nconsole.log(arr);  // [ 1, 2, 3 ]\n\n// ES6  \nconst  arr  =  [1,  2,  3];  \n// ...arr은 [1, 2, 3]을 개별 요소로 분리한다  \nconst  copy  =  [...arr];  \nconsole.log(copy);  // [ 1, 2, 3 ]  \n// copy를 변경한다.  \ncopy.push(4);  \nconsole.log(copy);  // [ 1, 2, 3, 4 ]  \n// arr은 변경되지 않는다.  \nconsole.log(arr);  // [ 1, 2, 3 ]\n")])])]),t._v(" "),e("p",[t._v("Spread 연산자를 사용하면 유사 배열 객체(Array-like Object)를 배열로 손쉽게 변환할 수 있다.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const  htmlCollection  =  document.getElementsByTagName('li');  \n// 유사 배열인 HTMLCollection을 배열로 변환한다.  \nconst  newArray  =  [...htmlCollection];  // Spread 연산자  \n// ES6의 Array.from 메소드를 사용할 수도 있다.  \n// const newArray = Array.from(htmlCollection);\n")])])])])])},function(){var t=this.$createElement,r=this._self._c||t;return r("h2",{attrs:{id:"rest-spread-프로퍼티"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rest-spread-프로퍼티","aria-hidden":"true"}},[this._v("#")]),this._v(" Rest/Spread 프로퍼티")])},function(){var t=this.$createElement,r=this._self._c||t;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("// 객체 리터럴 Rest/Spread 프로퍼티  \n// Spread 프로퍼티  \nconst  n  =  {  x:  1,  y:  2,  ...{  a:  3,  b:  4  }  };  \nconsole.log(n);  // { x: 1, y: 2, a: 3, b: 4 }  \n// Rest 프로퍼티  \nconst  {  x,  y,  ...z  }  =  n;  \nconsole.log(x,  y,  z);  // 1 2 { a: 3, b: 4 }\n\n// 객체의 병합  \nconst  merged  =  {  ...{  x:  1,  y:  2  },  ...{  y:  10,  z:  3  }  };  \nconsole.log(merged);  // { x: 1, y: 10, z: 3 }  \n// 특정 프로퍼티 변경  \nconst  changed  =  {  ...{  x:  1,  y:  2  },  y:  100  };  \n// changed = { ...{ x: 1, y: 2 }, ...{ y: 100 } }  \nconsole.log(changed);  // { x: 1, y: 100 }  \n// 프로퍼티 추가  \nconst  added  =  {  ...{  x:  1,  y:  2  },  z:  0  };  \n// added = { ...{ x: 1, y: 2 }, ...{ z: 0 } }  \nconsole.log(added);  // { x: 1, y: 2, z: 0 }\n")])])])}],!1,null,null,null);r.default=n.exports}}]);